{"version":3,"sources":["states.js","stateMachine.js"],"names":[],"mappingsfile":"sourceBundle.js","sourcesContent":["const stateModule = (function() {\r\n    const stateIDs = {\r\n        CLOSED: \"closed\",\r\n        OPEN: \"open\",\r\n        USER_AGREEMENT: \"userAgreement\",\r\n        AWAITING_CHATBOT_RESPONSE: \"awaitingChatbotResponse\",\r\n        CHATBOT_RESPONDING: \"chatbotResponding\",\r\n        IDLE: \"idle\",\r\n        ERROR: \"error\"\r\n    };\r\n\r\n    let idleTimeout;\r\n\r\n    const states = {\r\n        [stateIDs.CLOSED]: {\r\n            name: \"Closed\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                document.body.classList.remove(\"show-chatbot\");\r\n                ChatbotModule.getChatbotToggler().addEventListener(\"click\", handleToggleClick);\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n                ChatbotModule.getChatbotToggler().removeEventListener(\"click\", handleToggleClick);\r\n            },\r\n            transitions: [stateIDs.OPEN]\r\n        },\r\n        [stateIDs.OPEN]: {\r\n            name: \"Open\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                document.body.classList.add(\"show-chatbot\");\r\n                ChatbotModule.getChatbotToggler().addEventListener(\"click\", handleToggleClick);\r\n                enableChatInterface();\r\n                evaluateUserAgreement();\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n                ChatbotModule.getChatbotToggler().removeEventListener(\"click\", handleToggleClick);\r\n                clearIdleTimer();\r\n                disableChatInterface();\r\n            },\r\n            transitions: [stateIDs.CLOSED, stateIDs.USER_AGREEMENT, stateIDs.AWAITING_CHATBOT_RESPONSE, stateIDs.IDLE]\r\n        },\r\n        [stateIDs.USER_AGREEMENT]: {\r\n            name: \"User Agreement\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                ChatbotModule.getChatbotToggler().addEventListener(\"click\", handleToggleClick);\r\n                showUserAgreement();\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n                ChatbotModule.getChatbotToggler().removeEventListener(\"click\", handleToggleClick);\r\n                hideUserAgreement();\r\n            },\r\n            transitions: [stateIDs.CLOSED, stateIDs.OPEN]\r\n        },\r\n        [stateIDs.AWAITING_CHATBOT_RESPONSE]: {\r\n            name: \"Awaiting Chatbot Response\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n            },\r\n            transitions: [stateIDs.CHATBOT_RESPONDING]\r\n        },\r\n        [stateIDs.CHATBOT_RESPONDING]: {\r\n            name: \"Chatbot Responding\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                stateMachineModule.changeState(stateIDs.OPEN);\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n            },\r\n            transitions: [stateIDs.OPEN]\r\n        },\r\n        [stateIDs.IDLE]: {\r\n            name: \"Idle\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                stateMachineModule.changeState(stateIDs.CLOSED);\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n            },\r\n            transitions: [stateIDs.CLOSED]\r\n        },\r\n        [stateIDs.ERROR]: {\r\n            name: \"Error\",\r\n            enter() {\r\n                console.log(`Entering ${this.name} state`);\r\n                stateMachineModule.changeState(stateIDs.OPEN);\r\n            },\r\n            exit() {\r\n                console.log(`Exiting ${this.name} state`);\r\n            },\r\n            transitions: [stateIDs.CLOSED]\r\n        }\r\n    };\r\n\r\n    function handleToggleClick() {\r\n        const currentState = stateMachineModule.getCurrentState();\r\n        const newStateID = currentState === stateIDs.CLOSED ? stateIDs.OPEN : stateIDs.CLOSED;\r\n        stateMachineModule.changeState(newStateID);\r\n    }\r\n\r\n    function userHasAcceptedAgreement() {\r\n        const cookieValue = document.cookie\r\n            .split(\"; \")\r\n            .find(row => row.startsWith(\"userAgreementAccepted=\"))\r\n            ?.split(\"=\")[1];\r\n        return cookieValue === \"true\";\r\n    }\r\n\r\n    function handleAgreement() {\r\n        var chatbot = document.querySelector(\".chatbot\");\r\n        const isChecked = document.getElementById(\"agree-checkbox\").checked;\r\n\r\n        if (isChecked) {\r\n            const expiryDate = new Date();\r\n            expiryDate.setMinutes(expiryDate.getMinutes() + 30);\r\n            document.cookie = `userAgreementAccepted=true; expires=${expiryDate.toUTCString()}; path=/; secure; SameSite=Lax`;\r\n\r\n            stateMachineModule.changeState(stateIDs.OPEN);\r\n        } else {\r\n            chatbot.classList.add(\"shake\");\r\n\r\n            // Remove the class after the animation completes so we can add it later again.\r\n            chatbot.addEventListener(\"animationend\", function() {\r\n                chatbot.classList.remove(\"shake\");\r\n            }, { once: true });\r\n        }\r\n    }\r\n\r\n    function startIdleTimer() {\r\n        clearIdleTimer(); // Clear any existing timer\r\n        idleTimeout = setTimeout(() => {\r\n            stateMachineModule.changeState(stateIDs.IDLE);\r\n        }, 300000); // 5 minutes of inactivity\r\n    }\r\n\r\n    function clearIdleTimer() {\r\n        if (idleTimeout) {\r\n            clearTimeout(idleTimeout);\r\n            idleTimeout = null;\r\n        }\r\n    }\r\n\r\n    function enableChatInterface() {\r\n        document.querySelector(\".chat-input textarea\").disabled = false;\r\n        document.querySelector(\"#send-btn\").disabled = false;\r\n    }\r\n\r\n    function disableChatInterface() {\r\n        document.querySelector(\".chat-input textarea\").disabled = true;\r\n        document.querySelector(\"#send-btn\").disabled = true;\r\n    }\r\n\r\n    function evaluateUserAgreement() {\r\n        if (!userHasAcceptedAgreement()) {\r\n            stateMachineModule.changeState(stateIDs.USER_AGREEMENT);\r\n        } else {\r\n            console.log(\"User has accepted agreement.\");\r\n            startIdleTimer();\r\n        }\r\n    }\r\n\r\n    function showUserAgreement() {\r\n        disableChatInterface();\r\n        document.querySelector(\".user-agreement\").style.display = \"block\";\r\n        document.querySelector(\".agree-button\").addEventListener(\"click\", handleAgreement);\r\n    }\r\n\r\n    function hideUserAgreement() {\r\n        enableChatInterface();\r\n        document.querySelector(\".user-agreement\").style.display = \"none\";\r\n        document.querySelector(\".agree-button\").removeEventListener(\"click\", handleAgreement);\r\n    }\r\n\r\n    function init() {\r\n        console.log(\"States initialized.\");\r\n    }\r\n\r\n    return {\r\n        stateIDs,\r\n        states,\r\n        init\r\n    };\r\n})();","const stateMachineModule = (function() {\r\n    let currentState = stateModule.stateIDs.CLOSED;\r\n    let states = stateModule.states;\r\n\r\n    function changeState(newStateID) {\r\n        console.log(`=========================================`);\r\n        console.log(`Attempting to change state from ${currentState} to ${newStateID}`);\r\n\r\n        // Validate if the state transition is allowed\r\n        if (states[currentState] && states[currentState].transitions.includes(newStateID)) {\r\n            console.log(`State change from ${currentState} to ${newStateID} is allowed.`);\r\n\r\n            // Exit current state if an exit function exists\r\n            if (states[currentState].exit) {\r\n                states[currentState].exit();\r\n            }\r\n\r\n            // Update the current state\r\n            currentState = newStateID;\r\n            console.log(`Transitioning from ${states[currentState].name} to ${states[newStateID].name}`);\r\n\r\n            // Enter the new state if an enter function exists\r\n            if (states[newStateID].enter) {\r\n                states[newStateID].enter();\r\n            }\r\n        } else {\r\n            console.error(`Invalid state transition from ${currentState} to ${newStateID}.`);\r\n        }\r\n\r\n        return currentState;\r\n    }\r\n\r\n    function getCurrentState() {\r\n        return currentState;\r\n    }\r\n\r\n    // Initializes the state machine\r\n    function init() {\r\n        if (states[currentState] && states[currentState].enter) {\r\n            states[currentState].enter();\r\n        }\r\n        console.log(`State machine initialized.`);\r\n    }\r\n\r\n    return {\r\n        changeState,\r\n        getCurrentState,\r\n        init\r\n    };\r\n})();\r\n"]}